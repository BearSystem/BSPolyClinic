// <auto-generated />
using System;
using BSPolyClinic.Infra;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BSPolyClinic.Infra.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20210706020018_PolyClinicV1-0006")]
    partial class PolyClinicV10006
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BSPolyClinic.Domain.Entities.AddressHealthCenter", b =>
                {
                    b.Property<int>("AddressHealthCenterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("VARCHAR(512)");

                    b.Property<string>("Complement")
                        .HasColumnType("VARCHAR(512)");

                    b.Property<string>("Country")
                        .HasColumnType("VARCHAR(512)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(512)");

                    b.Property<string>("District")
                        .HasColumnType("VARCHAR(512)");

                    b.Property<int>("HealthCenterId")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .HasColumnType("VARCHAR(20)");

                    b.Property<string>("State")
                        .HasColumnType("CHAR(2)");

                    b.Property<string>("Street")
                        .HasColumnType("VARCHAR(512)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ZipCode")
                        .HasColumnType("VARCHAR(100)");

                    b.HasKey("AddressHealthCenterId");

                    b.HasIndex("HealthCenterId");

                    b.ToTable("AddressHealthCenters");
                });

            modelBuilder.Entity("BSPolyClinic.Domain.Entities.AddressUser", b =>
                {
                    b.Property<int>("AddressUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("VARCHAR(512)");

                    b.Property<string>("Complement")
                        .HasColumnType("VARCHAR(512)");

                    b.Property<string>("Country")
                        .HasColumnType("VARCHAR(512)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(512)");

                    b.Property<string>("District")
                        .HasColumnType("VARCHAR(512)");

                    b.Property<string>("Number")
                        .HasColumnType("VARCHAR(20)");

                    b.Property<string>("State")
                        .HasColumnType("CHAR(2)");

                    b.Property<string>("Street")
                        .HasColumnType("VARCHAR(512)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("VARCHAR(100)");

                    b.HasKey("AddressUserId");

                    b.HasIndex("UserId");

                    b.ToTable("AddressUsers");
                });

            modelBuilder.Entity("BSPolyClinic.Domain.Entities.Administrator", b =>
                {
                    b.Property<int>("AdministratorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AdministratorId");

                    b.HasIndex("UserId");

                    b.ToTable("Administrators");
                });

            modelBuilder.Entity("BSPolyClinic.Domain.Entities.Attendant", b =>
                {
                    b.Property<int>("AttendantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AttendantId");

                    b.HasIndex("UserId");

                    b.ToTable("Attendants");
                });

            modelBuilder.Entity("BSPolyClinic.Domain.Entities.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Crm")
                        .HasColumnType("VARCHAR(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DoctorId");

                    b.HasIndex("UserId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("BSPolyClinic.Domain.Entities.DoctorHealthCenter", b =>
                {
                    b.Property<int>("DoctorHealthCenterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("DoctorId1")
                        .HasColumnType("int");

                    b.Property<Guid>("HealthCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("HealthCenterId1")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("DoctorHealthCenterId");

                    b.HasIndex("DoctorId1");

                    b.HasIndex("HealthCenterId1");

                    b.ToTable("DoctorHealthCenter");
                });

            modelBuilder.Entity("BSPolyClinic.Domain.Entities.DoctorMedicalSpeciality", b =>
                {
                    b.Property<int>("DoctorMedicalSpecialityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("DoctorId1")
                        .HasColumnType("int");

                    b.Property<Guid>("MedicalSpecialityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("MedicalSpecialityId1")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("DoctorMedicalSpecialityId");

                    b.HasIndex("DoctorId1");

                    b.HasIndex("MedicalSpecialityId1");

                    b.ToTable("DoctorMedicalSpeciality");
                });

            modelBuilder.Entity("BSPolyClinic.Domain.Entities.HealthCenter", b =>
                {
                    b.Property<int>("HealthCenterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(512)");

                    b.Property<string>("Observation")
                        .HasColumnType("VARCHAR(512)");

                    b.Property<string>("Title")
                        .HasColumnType("VARCHAR(120)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("HealthCenterId");

                    b.ToTable("HealthCenters");
                });

            modelBuilder.Entity("BSPolyClinic.Domain.Entities.HealthCenterMedicalSpeciality", b =>
                {
                    b.Property<int>("HealthCenterMedicalSpecialityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("HealthCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("HealthCenterId1")
                        .HasColumnType("int");

                    b.Property<Guid>("MedicalSpecialityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("MedicalSpecialityId1")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("HealthCenterMedicalSpecialityId");

                    b.HasIndex("HealthCenterId1");

                    b.HasIndex("MedicalSpecialityId1");

                    b.ToTable("HealthCenterMedicalSpeciality");
                });

            modelBuilder.Entity("BSPolyClinic.Domain.Entities.HealthCenterNurse", b =>
                {
                    b.Property<int>("HealthCenterNurseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("HealthCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("HealthCenterId1")
                        .HasColumnType("int");

                    b.Property<Guid>("NurseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("NurseId1")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("HealthCenterNurseId");

                    b.HasIndex("HealthCenterId1");

                    b.HasIndex("NurseId1");

                    b.ToTable("HealthCenterNurses");
                });

            modelBuilder.Entity("BSPolyClinic.Domain.Entities.Job", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Jobs");

                    b.HasData(
                        new
                        {
                            Id = "c6594c77-5cc3-4f94-890c-6aa98544a6b8",
                            ConcurrencyStamp = "d7f2c912-6a72-45df-8879-02474762804b",
                            Description = "Administrador do sistema",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "2e96bf96-6e74-431c-b228-7d6ae210ae7f",
                            ConcurrencyStamp = "c0744b9e-249a-4347-b764-6d4d869e7cb0",
                            Description = "Gestor(a)",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "72311507-ce90-49cb-987d-5581b64e3cb8",
                            ConcurrencyStamp = "0032091f-d2a5-4fac-97f9-8f416d36521c",
                            Description = "Médico(a)",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        },
                        new
                        {
                            Id = "2374b9a3-ebcf-4250-a79c-73b280429306",
                            ConcurrencyStamp = "d6e9c15a-d1ab-4bda-9c04-61de914b7b80",
                            Description = "Enfermeiro(a)",
                            Name = "Nurse",
                            NormalizedName = "NURSE"
                        },
                        new
                        {
                            Id = "ce2ddba7-1d3b-4eb5-aad1-9c5344a69190",
                            ConcurrencyStamp = "bd6e42b1-e2ca-4458-9048-dc58627e3d43",
                            Description = "Atendente",
                            Name = "Attendant",
                            NormalizedName = "ATTENDANT"
                        },
                        new
                        {
                            Id = "462a7f79-e5dc-4f4c-b8d2-6196a5d4dd87",
                            ConcurrencyStamp = "c7051a67-8791-4c2f-8b8f-d1e11912d1d5",
                            Description = "Paciente",
                            Name = "Patient",
                            NormalizedName = "PATIENT"
                        });
                });

            modelBuilder.Entity("BSPolyClinic.Domain.Entities.Manager", b =>
                {
                    b.Property<int>("ManagerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ManagerId");

                    b.HasIndex("UserId");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("BSPolyClinic.Domain.Entities.MedicalSpeciality", b =>
                {
                    b.Property<int>("MedicalSpecialityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("BIT");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(512)");

                    b.Property<string>("Observation")
                        .HasColumnType("VARCHAR(512)");

                    b.Property<string>("Title")
                        .HasColumnType("VARCHAR(512)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("MedicalSpecialityId");

                    b.ToTable("MedicalSpecialties");
                });

            modelBuilder.Entity("BSPolyClinic.Domain.Entities.Nurse", b =>
                {
                    b.Property<int>("NurseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Crm")
                        .HasColumnType("VARCHAR(150)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("NurseId");

                    b.HasIndex("UserId");

                    b.ToTable("Nurses");
                });

            modelBuilder.Entity("BSPolyClinic.Domain.Entities.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PatientId");

                    b.HasIndex("UserId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("BSPolyClinic.Domain.Entities.PhoneHealthCenter", b =>
                {
                    b.Property<int>("PhoneHealthCenterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("HealthCenterId")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("Observation")
                        .HasColumnType("VARCHAR(300)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("PhoneHealthCenterId");

                    b.HasIndex("HealthCenterId");

                    b.ToTable("PhoneHealthCenter");
                });

            modelBuilder.Entity("BSPolyClinic.Domain.Entities.PhoneUser", b =>
                {
                    b.Property<int>("PhoneUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Number")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("Observation")
                        .HasColumnType("VARCHAR(300)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PhoneUserId");

                    b.HasIndex("UserId");

                    b.ToTable("PhoneUser");
                });

            modelBuilder.Entity("BSPolyClinic.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Foto")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BSPolyClinic.Domain.Entities.AddressHealthCenter", b =>
                {
                    b.HasOne("BSPolyClinic.Domain.Entities.HealthCenter", "HealthCenter")
                        .WithMany("AddressHealthCenters")
                        .HasForeignKey("HealthCenterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("HealthCenter");
                });

            modelBuilder.Entity("BSPolyClinic.Domain.Entities.AddressUser", b =>
                {
                    b.HasOne("BSPolyClinic.Domain.Entities.User", "User")
                        .WithMany("AddressesUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BSPolyClinic.Domain.Entities.Administrator", b =>
                {
                    b.HasOne("BSPolyClinic.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BSPolyClinic.Domain.Entities.Attendant", b =>
                {
                    b.HasOne("BSPolyClinic.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BSPolyClinic.Domain.Entities.Doctor", b =>
                {
                    b.HasOne("BSPolyClinic.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BSPolyClinic.Domain.Entities.DoctorHealthCenter", b =>
                {
                    b.HasOne("BSPolyClinic.Domain.Entities.Doctor", "Doctor")
                        .WithMany("DoctorHealthCenters")
                        .HasForeignKey("DoctorId1");

                    b.HasOne("BSPolyClinic.Domain.Entities.HealthCenter", "HealthCenter")
                        .WithMany("DoctorHealthCenter")
                        .HasForeignKey("HealthCenterId1");

                    b.Navigation("Doctor");

                    b.Navigation("HealthCenter");
                });

            modelBuilder.Entity("BSPolyClinic.Domain.Entities.DoctorMedicalSpeciality", b =>
                {
                    b.HasOne("BSPolyClinic.Domain.Entities.Doctor", "Doctor")
                        .WithMany("DoctorMedicalSpecialities")
                        .HasForeignKey("DoctorId1");

                    b.HasOne("BSPolyClinic.Domain.Entities.MedicalSpeciality", "MedicalSpeciality")
                        .WithMany("DoctorMedicalSpecialities")
                        .HasForeignKey("MedicalSpecialityId1");

                    b.Navigation("Doctor");

                    b.Navigation("MedicalSpeciality");
                });

            modelBuilder.Entity("BSPolyClinic.Domain.Entities.HealthCenterMedicalSpeciality", b =>
                {
                    b.HasOne("BSPolyClinic.Domain.Entities.HealthCenter", "HealthCenter")
                        .WithMany("HealthCenterMedicalSpecialities")
                        .HasForeignKey("HealthCenterId1");

                    b.HasOne("BSPolyClinic.Domain.Entities.MedicalSpeciality", "MedicalSpeciality")
                        .WithMany("HealthCenterMedicalSpecialities")
                        .HasForeignKey("MedicalSpecialityId1");

                    b.Navigation("HealthCenter");

                    b.Navigation("MedicalSpeciality");
                });

            modelBuilder.Entity("BSPolyClinic.Domain.Entities.HealthCenterNurse", b =>
                {
                    b.HasOne("BSPolyClinic.Domain.Entities.HealthCenter", "HealthCenter")
                        .WithMany("HealthCenterNurses")
                        .HasForeignKey("HealthCenterId1");

                    b.HasOne("BSPolyClinic.Domain.Entities.Nurse", "Nurse")
                        .WithMany("HealthCenterNurses")
                        .HasForeignKey("NurseId1");

                    b.Navigation("HealthCenter");

                    b.Navigation("Nurse");
                });

            modelBuilder.Entity("BSPolyClinic.Domain.Entities.Manager", b =>
                {
                    b.HasOne("BSPolyClinic.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BSPolyClinic.Domain.Entities.Nurse", b =>
                {
                    b.HasOne("BSPolyClinic.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BSPolyClinic.Domain.Entities.Patient", b =>
                {
                    b.HasOne("BSPolyClinic.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BSPolyClinic.Domain.Entities.PhoneHealthCenter", b =>
                {
                    b.HasOne("BSPolyClinic.Domain.Entities.HealthCenter", "HealthCenter")
                        .WithMany("Phones")
                        .HasForeignKey("HealthCenterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("HealthCenter");
                });

            modelBuilder.Entity("BSPolyClinic.Domain.Entities.PhoneUser", b =>
                {
                    b.HasOne("BSPolyClinic.Domain.Entities.User", "User")
                        .WithMany("PhonesUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BSPolyClinic.Domain.Entities.User", b =>
                {
                    b.OwnsOne("BSPolyClinic.Domain.ValueObjects.Document", "Document", b1 =>
                        {
                            b1.Property<string>("UserId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("CPF")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("NumberSUS")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("RG")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("UserId");

                            b1.HasIndex("CPF")
                                .IsUnique()
                                .HasFilter("[Document_CPF] IS NOT NULL");

                            b1.HasIndex("NumberSUS")
                                .IsUnique()
                                .HasFilter("[Document_NumberSUS] IS NOT NULL");

                            b1.HasIndex("RG")
                                .IsUnique()
                                .HasFilter("[Document_RG] IS NOT NULL");

                            b1.ToTable("AspNetUsers");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("BSPolyClinic.Domain.ValueObjects.Email", "Emails", b1 =>
                        {
                            b1.Property<string>("UserId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Address")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SecundaryAddress")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UserId");

                            b1.ToTable("AspNetUsers");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("BSPolyClinic.Domain.ValueObjects.Name", "Name", b1 =>
                        {
                            b1.Property<string>("UserId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("FirstName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("LastName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("NickName")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UserId");

                            b1.ToTable("AspNetUsers");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Document");

                    b.Navigation("Emails");

                    b.Navigation("Name");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("BSPolyClinic.Domain.Entities.Job", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BSPolyClinic.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BSPolyClinic.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("BSPolyClinic.Domain.Entities.Job", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BSPolyClinic.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BSPolyClinic.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BSPolyClinic.Domain.Entities.Doctor", b =>
                {
                    b.Navigation("DoctorHealthCenters");

                    b.Navigation("DoctorMedicalSpecialities");
                });

            modelBuilder.Entity("BSPolyClinic.Domain.Entities.HealthCenter", b =>
                {
                    b.Navigation("AddressHealthCenters");

                    b.Navigation("DoctorHealthCenter");

                    b.Navigation("HealthCenterMedicalSpecialities");

                    b.Navigation("HealthCenterNurses");

                    b.Navigation("Phones");
                });

            modelBuilder.Entity("BSPolyClinic.Domain.Entities.MedicalSpeciality", b =>
                {
                    b.Navigation("DoctorMedicalSpecialities");

                    b.Navigation("HealthCenterMedicalSpecialities");
                });

            modelBuilder.Entity("BSPolyClinic.Domain.Entities.Nurse", b =>
                {
                    b.Navigation("HealthCenterNurses");
                });

            modelBuilder.Entity("BSPolyClinic.Domain.Entities.User", b =>
                {
                    b.Navigation("AddressesUsers");

                    b.Navigation("PhonesUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
